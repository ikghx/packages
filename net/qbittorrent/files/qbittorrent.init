#!/bin/sh /etc/rc.common

START=98

USE_PROCD=1

script=$(readlink "$initscript")
NAME="$(basename ${script:-$initscript})"
PROG=/usr/bin/qbittorrent-nox

QBT_CONF_FILE=/tmp/qBittorrent/config/qBittorrent.conf
QBT_INSTANCE=""

_info() {
	logger -p daemon.info -t "$NAME" "$*"
}

_err() {
	logger -p daemon.err -t "$NAME" "$*"
}

_make_dir() {
	local d
	for d in "$@"; do
		if [ ! -d "$d" ]; then
			mkdir -p "$d" 2>/dev/null || return 1
		fi
	done

	return 0
}

_change_owner() {
	local u="$1"; shift

	local d
	for d in "$@"; do
		if [ -f "$d" ]; then
			chown "$u" "$d" 2>/dev/null || return 1
		elif [ -d "$d" ]; then
			chown -R "$u" "$d" 2>/dev/null || return 1
		fi
	done

	return 0
}

_reset_dir_mode() {
	local d
	for d in "$@"; do
		if [ -d "$d" ]; then
			find "$d" -type d -exec chmod 755 {} \; 2>/dev/null
			find "$d" -type f -exec chmod 644 {} \; 2>/dev/null
		fi
	done
}

validate_QBT() {
	uci_load_validate "$1" "$2" "$3" "$4" \
		'EnableService:bool:0' \
		'Overwrite:bool:0' \
		'user:string:root' \
		'nice:range(-20,19):0' \
		'BinaryLocation:string' \
		'RootProfilePath:string:/tmp' \
		'ConfigurationName:string' \
		'DHT:or("true","false"):true' \
		'Encryption:or("0","1","2"):0' \
		'LSD:or("true","false"):true' \
		'MaxConnecs:integer' \
		'MaxConnecsPerTorrent:integer' \
		'MaxRatio:float' \
		'MaxRatioAction:or("0","1")' \
		'MaxUploads:integer' \
		'MaxUploadsPerTorrent:integer' \
		'PeX:or("true","false"):true' \
		'uTP_rate_limited:or("true","false"):true' \
		'PortRangeMin:range(1024,65535)' \
		'InetAddress:string' \
		'UPnP:or("true","false"):true' \
		'GlobalDLLimit:float' \
		'GlobalDLLimitAlt:float' \
		'GlobalUPLimit:float' \
		'GlobalUPLimitAlt:float' \
		'DiskWriteCacheSize:integer' \
		'DiskWriteCacheTTL:integer' \
		'FinishedTorrentExportDir:string' \
		'PreAllocation:or("true","false"):false' \
		'SavePath:string:/tmp/download' \
		'StartInPause:or("true","false"):false' \
		'TempPathEnabled:or("true","false"):true' \
		'TempPath:string:temp/' \
		'UseIncompleteExtension:or("true","false"):false' \
		'TorrentExportDir:string' \
		'Locale:string:en' \
		'UseRandomPort:or("true","false"):true' \
		'IgnoreSlowTorrents:or("true","false")' \
		'MaxActiveDownloads:integer' \
		'MaxActiveTorrents:integer' \
		'MaxActiveUploads:integer' \
		'QueueingEnabled:or("true","false")' \
		'AuthSubnetWhitelist:string' \
		'Address:ipaddr' \
		'AuthSubnetWhitelistEnabled:or("true","false"):false' \
		'ClickjackingProtection:or("true","false"):true' \
		'CSRFProtection:or("true","false"):true' \
		'CustomHTTPHeadersEnabled:or("true","false"):false' \
		'CustomHTTPHeaders:string' \
		'HostHeaderValidation:or("true","false"):true' \
		'HTTPS__Enabled:or("true","false")' \
		'HTTPS__CertificatePath:string' \
		'HTTPS__KeyPath:string' \
		'LocalHostAuth:or("true","false"):true' \
		'Password:string' \
		'Port:port:8080' \
		'SecureCookie:or("true","false"):true' \
		'ServerDomains:string' \
		'Username:string' \
		'UseUPnP:or("true","false")' \
		'AnonymousMode:or("true","false"):true' \
		'AnnounceToAllTrackers:or("true","false")' \
		'IgnoreLimitsLAN:or("true","false"):true' \
		'IncludeOverhead:or("true","false"):false' \
		'osCache:or("true","false")' \
		'OutgoingPortsMax:port' \
		'OutgoingPortsMin:port' \
		'AnnounceToAllTiers:or("true","false")' \
		'BTProtocol:or("Both","TCP","UTP")' \
		'CreateTorrentSubfolder:or("true","false"):true' \
		'DisableAutoTMMByDefault:or("true","false"):true' \
		'GlobalMaxSeedingMinutes:integer' \
		'SeedChokingAlgorithm:or("RoundRobin","FastestUpload","AntiLeech")' \
		'SlowTorrentsDownloadRate:integer' \
		'SlowTorrentsInactivityTimer:integer' \
		'SlowTorrentsUploadRate:integer' \
		'CategoryChanged:or("true","false"):false' \
		'CategorySavePathChanged:or("true","false"):true' \
		'DefaultSavePathChanged:or("true","false"):true' \
		'AutoDeleteAddedTorrentFile:or("Never","IfAdded"):Never' \
		'Enabled:or("true","false"):true' \
		'Path:string' \
		'Backup:or("true","false")' \
		'DeleteOld:or("true","false")' \
		'MaxSizeBytes:integer' \
		'SaveTime:string'
}

sed_options() {
	local Anchor=$1
	local category="$( echo $2 | sed 's/\s/\\\\/g' )"
	shift
	shift

	if [ -z "$(grep ^\\[$Anchor\\]\$ $QBT_CONF_FILE)" ]; then
		test -s "$QBT_CONF_FILE" && sed -i "\${/./G;s/\$/\n\[$Anchor\]/}"  "$QBT_CONF_FILE" || echo "[$Anchor]" >>"$QBT_CONF_FILE"
	fi

	local o; local v; local ol
	for o in "$@"; do
		v="$( eval echo -E "\$$o" | sed 's/[\/\.]/\\&/g' )"

		[ -n "$category" ] && ol="$category\\\\$o" || ol="$o"
		ol="$( echo $ol | sed 's/__/\\\\/g')"

		if [ -n "$v" ]; then
			if [ -z "$(grep ^$ol=.* $QBT_CONF_FILE)" ]; then
				sed -i "/\[$Anchor\]/a $ol=$v" "$QBT_CONF_FILE"
				#sed -i '/\['"$Anchor"'\]/{$ba;h;d};x;/\['"$Anchor"'\]/{x;/./{$bm;H;d};:m;x;:a;s/$/\n'"$ol=$v"'/;x;H};x' "$QBT_CONF_FILE"
			else
				[ "$Overwrite" != "1" ] && [ "$category" != "FileLogger" ] || sed -i "s/$ol=.*/$ol=$v/g" "$QBT_CONF_FILE"
			fi
		else
			[ "$Overwrite" != "1" ] && [ "$category" != "FileLogger" ] || sed -i "/$ol=.*/d" "$QBT_CONF_FILE"
		fi
	done
}

config_QBT() {
	if [ "${#Password}" -eq 32 ]; then
		Password_ha1="@ByteArray($Password)"
	elif [ "${#Password}" -eq 113 ]; then
		Password_PBKDF2="@ByteArray($Password)"
	fi

	if [ -n "$SaveTime" ]; then
		[ -z "$(echo $SaveTime | sed 's/[0-9dmyDMY]//g')" ] || { _err "Error save time setted."; return 1; }

		Age="$(echo $SaveTime | sed 's/[dmyDMY]//g')"
		AgeType="$(echo $SaveTime | sed 's/[0-9]//g' | sed 's/[dD]/0/g' | sed 's/[mM]/1/g' | sed 's/[yY]/2/g')"
	fi

	if [ ! -f "$QBT_CONF_FILE" ]; then
		cat>"$QBT_CONF_FILE"<<-EOF
			[LegalNotice]
			Accepted=true

			[Network]
			Cookies=@Invalid()
		EOF
	fi

	sed_options "Core" "" \
				"AutoDeleteAddedTorrentFile"
	sed_options "BitTorrent" "Session DisableAutoTMMTriggers" \
				"CategoryChanged" "CategorySavePathChanged" "DefaultSavePathChanged"
	sed_options "BitTorrent" "Session" \
				"AnnounceToAllTiers" "BTProtocol" "CreateTorrentSubfolder" "DisableAutoTMMByDefault" "GlobalMaxSeedingMinutes" \
				"SeedChokingAlgorithm" "SlowTorrentsDownloadRate" "SlowTorrentsInactivityTimer" "SlowTorrentsUploadRate"
	sed_options "Preferences" "WebUI" \
				"Address" "AuthSubnetWhitelistEnabled" "AuthSubnetWhitelist" "CSRFProtection" "ClickjackingProtection" \
				"CustomHTTPHeadersEnabled" "CustomHTTPHeaders" "HostHeaderValidation" "HTTPS__Enabled" \
				"HTTPS__CertificatePath" "HTTPS__KeyPath" "LocalHostAuth" "Password_ha1" "Password_PBKDF2" \
				"Port" "SecureCookie" "ServerDomains" "Username" "UseUPnP"
	sed_options "Preferences" "Queueing" \
				"IgnoreSlowTorrents" "MaxActiveDownloads" "MaxActiveTorrents" "MaxActiveUploads" \
				"QueueingEnabled"
	sed_options "Preferences" "General" \
				"Locale" "UseRandomPort"
	sed_options "Preferences" "Downloads" \
				"DiskWriteCacheSize" "DiskWriteCacheTTL" "FinishedTorrentExportDir" "PreAllocation" \
				"SavePath" "StartInPause" "TempPathEnabled" "TempPath" "TorrentExportDir" \
				"UseIncompleteExtension"
	sed_options "Preferences" "Connection" \
				"GlobalDLLimit" "GlobalDLLimitAlt" "GlobalUPLimit"	"GlobalUPLimitAlt" \
				"PortRangeMin" "InetAddress" "UPnP"
	sed_options "Preferences" "Bittorrent" \
				"DHT" "Encryption" "LSD" "MaxConnecs" "MaxConnecsPerTorrent" "MaxRatio" \
				"MaxRatioAction" "MaxUploads" "MaxUploadsPerTorrent" "PeX" "uTP_rate_limited"
	sed_options "Preferences" "Advanced" \
				"AnnounceToAllTrackers" "AnonymousMode" "IgnoreLimitsLAN" "IncludeOverhead" "osCache" "OutgoingPortsMax" \
				"OutgoingPortsMin"
	sed_options "Application" "FileLogger" \
				"Enabled" "Path" "Backup" "DeleteOld" "MaxSizeBytes" "Age" "AgeType"

	[ "$Overwrite" != "1" ] || sed -i "s/\(MigrationVersion\)=.*/\1=1/g" "$QBT_CONF_FILE"
}

init_instance() {
	[ "$2" = 0 ] || return 1

	QBT_INSTANCE="${NAME}.$1"

	RootProfilePath=$(echo $RootProfilePath | sed 's/\(.*\)\/$/\1/')

	[ -z "$BinaryLocation" ] || PROG="$BinaryLocation"

	local running=$(ubus call service list "{'name':'$NAME'}" | jsonfilter -e "@.$NAME.instances['${QBT_INSTANCE}'].running")
	[ x"$EnableService" != x0 ] || return 1

	local confdir="qBittorrent"
	[ -z "$ConfigurationName" ] || confdir="qBittorrent_$ConfigurationName"

	_make_dir "$RootProfilePath/$confdir/config" "$SavePath" "$TempPath" || {
		_err "Can't create dirs!"
		return 1
	}

	_reset_dir_mode "$RootProfilePath/$confdir" "$SavePath" "$TempPath"

	if [ -n "$user" ]; then
		if ( user_exists "$user" && _change_owner "$user" "$RootProfilePath/$confdir" "$SavePath" "$TempPath" ); then
			_info "qBittorrent will run with user '$user'."
		else
			_info "Setting run user to '$user' failed, default user will be used."
			user=root
		fi
	fi

	if [ "$AuthSubnetWhitelistEnabled" = true ]; then
		AuthSubnetWhitelist="$( echo $AuthSubnetWhitelist | sed 's/ /,/g')"
	else
		AuthSubnetWhitelist="@Invalid()"
	fi

	if [ "$CustomHTTPHeadersEnabled" = true ]; then
		CustomHTTPHeaders="$( echo -E "$CustomHTTPHeaders" | sed ':tag;N;s/\n/\\n/;b tag')"
	fi

	QBT_CONF_FILE="$RootProfilePath/$confdir/config/qBittorrent.conf"
	config_QBT
	create_instance
}

create_instance() {
	procd_open_instance "$QBT_INSTANCE"
	procd_set_param command "$PROG"
	procd_append_param command --profile="$RootProfilePath"

	[ -z "$ConfigurationName" ] || procd_append_param command --configuration="$ConfigurationName"

	procd_set_param respawn
	procd_set_param user "$user"
	procd_set_param nice "$nice"
	procd_set_param file "$QBT_CONF_FILE"
	procd_set_param term_timeout 60
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger "$NAME"
}

start_service() {
	config_load "$NAME"
	validate_QBT "$NAME" "$NAME" "main" init_instance
	return 0
}

reload_service() {
	stop
	while running "$NAME" "$QBT_INSTANCE"; do
		sleep 1
	done
	start
}

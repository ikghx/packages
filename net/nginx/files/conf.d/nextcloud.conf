# 官方网站：https://nextcloud.com/
# 下载 PHP 程序包：https://download.nextcloud.com/server/releases/nextcloud-23.0.0.zip
server {
    listen       80; # IPv4 HTTP 监听端口。
    #listen       [::]:80; #IPv6 HTTP 监听端口。
    server_name  localhost; # 服务器名称，可设置多个域名，空格分隔。
    return 301 https://$server_name$request_uri; # 将所有 HTTP 访问重定向至 HTTPS。
}

server {
    listen      443 ssl http2; # IPv4 HTTPS 监听端口。
    #listen      [::]:443 ssl http2; # IPv6 HTTPS 监听端口。
    server_name localhost; # 服务器名称，可设置多个域名，空格分隔。
    root        /mnt/sda/www/nextcloud; # 根目录，不要与其它 PHP 程序共用相同目录。
    index       index.php index.html /index.php$request_uri; # 首页文件名称，可设置多个名称，空格分隔，优先级依据前后顺序。

    ssl_certificate      fullchain.pem; # 证书文件路径，只写名称则表示在 nginx 默认配置文件目录内。
    ssl_certificate_key  privkey.key; # 密钥文件路径，只写名称则表示在 nginx 默认配置文件目录内。
    ssl_session_cache    shared:SSL:10m; # 设置 SSL 会话缓存的类型和大小，以便提升 HTTPS 连接的访问效率。
    ssl_session_timeout  60m; # 缓存 SSL 会话超时，超时后将自动清空缓存。
    ssl_session_tickets  on; # 允许客户端缓存 SSL 会话。
    ssl_protocols TLSv1.2 TLSv1.3; # 设置允许的 SSL 安全协议，未列出的则禁止连接。
    ssl_early_data on; # 启用 0-RTT 模式，以减少 HTTPS 握手次数，加快连接效率 (仅支持 TLS 1.3)
    ssl_ciphers HIGH:!aNULL:!MD5; # 指定 SSL 加密算法，可明确指定某种算法，优先级依据前后顺序。
    ssl_prefer_server_ciphers on; # 设置协商加密算法时，优先使用服务端设置的加密算法，而不是客户端的加密算法。

    # OCSP Stapling 验证证书有效性并发送到客户端，提高客户端访问效率，下列三项不适用于自签名证书。
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate fullchain.pem; # 包含完整证书链的证书文件。


    add_header Referrer-Policy                      "no-referrer"   always;
    add_header X-Content-Type-Options               "nosniff"       always;
    add_header X-Download-Options                   "noopen"        always;
    add_header X-Frame-Options                      "SAMEORIGIN"    always;
    add_header X-Permitted-Cross-Domain-Policies    "none"          always;
    add_header X-Robots-Tag                         "none"          always;
    add_header X-XSS-Protection                     "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS头部，让浏览器自动访问HTTPS

    fastcgi_hide_header X-Powered-By; # 隐藏主机头信息。
    fastcgi_buffers 64 4K;

    client_max_body_size 0; # 设置客户端上传文件的大小限制，0 为不限制。

    #limit_conn perip 1; # 限制每个客户端 IP 与服务器的连接数。
    #limit_conn perserver 1000; # 限制所有客户端与服务器的连接总数。
    #limit_rate_after 1024k; # 限制客户端初始传输速率。
    #limit_rate       1024k; # 限制客户端传输速率。

    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
    location = / {
        if ( $http_user_agent ~ ^DavClnt ) {
            return 302 /remote.php/webdav/$is_args$args;
        }
    }

    # 配置 robots.txt 的策略，设置是否允许访问，是否记录访问此文件的日志。
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Make a regex exception for `/.well-known` so that clients can still
    # access it despite the existence of the regex rule
    # `location ~ /(\.|autotest|...)` which would otherwise handle requests
    # for `/.well-known`.
    location ^~ /.well-known {
        # The rules in this block are an adaptation of the rules
        # in `.htaccess` that concern `/.well-known`.

        location = /.well-known/carddav { return 301 /remote.php/dav/; }
        location = /.well-known/caldav  { return 301 /remote.php/dav/; }

        location /.well-known/acme-challenge    { try_files $uri $uri/ =444; }
        location /.well-known/pki-validation    { try_files $uri $uri/ =444; }

        # Let Nextcloud's API for `/.well-known` URIs handle all other
        # requests by passing them to the front-end controller.
        return 301 /index.php$request_uri;
    }

    # Rules borrowed from `.htaccess` to hide certain paths from clients
    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  { return 444; }
    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 444; }

    # Ensure this block, which passes PHP files to the PHP process, is above the blocks
    # which handle static assets (as seen below). If this block is not declared first,
    # then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`
    # to the URI, resulting in a HTTP 500 error response.
    location ~ \.php(?:$|/) {
        # Required for legacy support
        rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php$request_uri;

        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        set $path_info $fastcgi_path_info;

        try_files $fastcgi_script_name =444;

        include fastcgi_params;
        #include naxsi.rules; # 加载 NAXSI 防火墙规则。
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $path_info;

        fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
        fastcgi_param front_controller_active true;     # Enable pretty urls
        fastcgi_pass unix:/var/run/php-fpm/php7-fpm.sock;

        fastcgi_intercept_errors on;
        fastcgi_request_buffering off;
    }

    location /RequestDenied {
        return 444;
    }

    location ~ \.(?:css|js|svg|gif|png|jpg|ico|wasm|tflite)$ {
        try_files $uri /index.php$request_uri;
        expires 6M;         # Cache-Control policy borrowed from `.htaccess`
        access_log off;     # Optional: Don't log access to assets

        location ~ \.wasm$ {
            default_type application/wasm;
        }
    }

    location ~ \.woff2?$ {
        try_files $uri /index.php$request_uri;
        expires 7d;         # Cache-Control policy borrowed from `.htaccess`
        access_log off;     # Optional: Don't log access to assets
    }

    # Rule borrowed from `.htaccess`
    location /remote {
        return 301 /remote.php$request_uri;
    }

    location / {
        try_files $uri $uri/ /index.php$request_uri;
    }
}

# 指定运行 Nginx 的用户，注意：用于承载 LuCI 界面时则只能使用 root 用户。
user root;
# 指定 nginx 的运行进程数量，一般建议小于或等于 CPU 核心数，设为 auto 则自动检测并使用和核心数一样的进程数量。
worker_processes auto;
# 错误日志路径。
error_log /var/log/nginx/error.log;
# 运行时的 PID 文件路径。
pid /var/run/nginx.pid;
# 设置工作进程的最大打开文件数限制。
worker_rlimit_nofile 65535;
# 载入 Nginx 动态模块。
include module.d/luci.module;

events {
        # 工作进程将一次接受所有新连接。
        multi_accept on;
        # 设置单个进程最大连接数量，根据硬件性能进行调整，最大不能超过系统文件句柄数限制。
        # 使用 ulimit -n 查询当前系统的文件句柄数限制。
        worker_connections 10240;
}


http {
      # 文件扩展名与文件类型映射表，用于告知浏览器文件的类型，以便浏览器执行正确的操作。
      include       mime.types;
      # 加载 NAXSI 应用防火墙核心规则。
      #include       naxsi_core.rules;
      # 默认的文件类型，当浏览器打开文件类型映射表中没有的文件格式，将按照此处参数标识文件类型，默认标识为可下载文件。
      default_type  application/octet-stream;

      # 自定义日志文件格式。
      #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      #                  '$status $body_bytes_sent "$http_referer" '
      #                  '"$http_user_agent" "$http_x_forwarded_for"';

      # 通用基本参数。
      access_log     off; # 是否启用访问日志。
      #access_log     /var/run/access.log main buffer=64k flush=1m; # 访问日志，用于记录详细的网站访问历史。
      #open_log_file_cache max=1000 inactive=10s valid=1m min_uses=1; # 日志文件缓存。
      charset        utf-8; # 指定 Nginx 默认的字符集，解决中文显示乱码，文档内容也需要使用 utf-8 编码才能正常在浏览器内显示。
      server_tokens  off; # 隐藏 Nginx 的版本号。
      types_hash_max_size 2048; # 哈希表的最大值（字节），Nginx 使用哈希表来存储 MIME type 与文件扩展名。

      sendfile       on; # 开启文件高效传输模式，当作为反向代理时应将此项改为 off
      tcp_nopush     on; # 在一个数据包里发送所有头文件，sendfile 选项开启时此选项才有效。
      tcp_nodelay    on; # 当连接转换为保持活动状态时，将启用该选项，SSL 连接，无缓冲代理和 WebSocket 代理也应启用。

      # 客户端访问参数。
      keepalive_timeout 65s; # 设置每个 TCP 连接的超时，超时未响应则自动关闭连接。
      keepalive_requests 1024; # 设置可通过一个保持活动连接提供的最大请求数，在发出最大请求数后，将关闭该连接。
      client_body_timeout 30s; # 设置客户端请求正文的超时，如果客户端在此时间内未发送任何内容，请求将以408（请求超时）错误终止。
      client_header_timeout 30s; # 设置客户端请求标头的超时，如果客户端在此时间内未传输整个标头，请求将以408（请求超时）错误终止。
      send_timeout 60s; # 设置服务端向客户端传输数据的超时，如果客户端在此时间内未接收任何内容，则关闭连接。
      reset_timedout_connection on; # 服务端在客户端停止发送应答之后关闭连接，当有大量并发需求时建议打开。
      client_header_buffer_size 16k; # 设置请求标头分配的缓冲区大小，如果请求头大于此大小则使用 large_client_header_buffers 参数。
      large_client_header_buffers 4 64k; # 指定用于读取大型客户端请求头的缓冲区的最大数量和大小。
      client_body_buffer_size 512k; # 设置客户端请求正文的缓冲区大小。
      client_max_body_size 128m; # 设置客户端请求正文的最大值，超过最大值就会发生 413 错误，一般和上传文件分片大小有关。
      client_body_temp_path /tmp; # 设置客户端上传文件的临时存放目录，常用于 WebDAV
      dav_ext_lock_zone zone=davlock:10m; # DAV 文件锁内存共享区。
      limit_conn_zone $binary_remote_addr zone=perip:10m; # 限制每个客户端与服务器的连接数有关，设置共享内存区域大小，用于保留各种键值的状态。
      limit_conn_zone $server_name zone=perserver:10m; # 限制所有客户端与服务器的连接总数有关，设置共享内存区域大小，用于保留各种键值的状态。
      limit_conn_status 503; # 当连接数超过限制时返回的状态码。
      limit_conn_log_level error; # 当连接数超过限制时的日志记录等级。

      open_file_cache max=65535 inactive=30s; # 为打开文件设置缓存信息，max 指缓存数量，inactive 是指超时后文件没被请求就删除缓存。
      open_file_cache_valid    30s; # 设置检查缓存有效信息的时间间隔。
      open_file_cache_min_uses 2; # pen_file_cache 参数中的 inactive 参数时间内文件的最少使用次数，低于此次数则从缓存中删除。
      open_file_cache_errors   on; # 缓存文件错误信息，例如文件不存在。

      # fastcgi 调优。
      fastcgi_connect_timeout 600s; # 连接到后端 FastCGI 的超时时间。
      fastcgi_send_timeout 600s; # 向 FastCGI 发送请求的超时时间。
      fastcgi_read_timeout 600s; # 接收 FastCGI 应答的超时时间。

      # 开启网页压缩功能，提升页面加载速度，HTTP 文件服务器应该禁用 gzip 模块。
      gzip on; # 开启或关闭动态 gzip 支持模块。
      gzip_vary on; # 添加 "Vary: Accept-Encoding" 响应头，用于告知客户端开启 gzip 功能。
      gzip_static on; # 开启或关闭静态 gzip 支持模块。
      gzip_min_length 1k; # 低于此大小的资源不压缩。
      gzip_comp_level 6; # 压缩级别 1-9，越大压缩率越高，同时消耗 cpu 资源也越多。
      gzip_proxied expired no-cache no-store private no_last_modified no_etag auth; # 当服务器位于反向代理后面时，如何处理 GZIP 压缩策略。
      gzip_types text/css text/vtt text/xml text/plain text/vcard text/x-component text/cache-manifest text/vnd.rim.location.xloc text/x-cross-domain-policy image/bmp image/svg+xml image/x-icon font/opentype application/json application/ld+json application/manifest+json application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/javascript application/x-javascript application/xml application/rss+xml application/xhtml+xml application/atom+xml; # 匹配 MIME 类型进行压缩，（无论是否指定）"text/html" 类型总是会被压缩的。

      # Brotli 压缩模块，功能同 gzip，压缩效果更好，可共存，根据浏览器支持与否自动选择。
      brotli on; # 开启或关闭 Brotli 模块。
      brotli_min_length 1k; # 低于此大小的资源不压缩。
      brotli_comp_level 6; # 压缩级别 0-11，越大压缩率越高，同时消耗 cpu 资源也越多。
      brotli_types text/css text/vtt text/xml text/plain text/vcard text/x-component text/cache-manifest text/vnd.rim.location.xloc text/x-cross-domain-policy image/bmp image/svg+xml image/x-icon font/opentype application/json application/ld+json application/manifest+json application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/javascript application/x-javascript application/xml application/rss+xml application/xhtml+xml application/atom+xml; # 匹配 MIME 类型进行压缩，*表示匹配所有 MIME 类型。

      include /etc/nginx/conf.d/luci*.conf; # 仅加载 luci 的配置文件，按需自行调整。
}
